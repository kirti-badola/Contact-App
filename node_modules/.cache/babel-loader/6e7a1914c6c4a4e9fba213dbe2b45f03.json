{"ast":null,"code":"var _jsxFileName = \"R:\\\\react-projects\\\\contact-app\\\\src\\\\ContactApp.jsx\";\nimport React, { useState } from 'react';\nimport './index.css';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"; // bootstrap\n\nimport Contact from './Contact';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ContactApp = () => {\n  // Add items\n  const addItem = () => {\n    if (!inputData && !inputEmail) {\n      alert('Please Fill Your Name & Email Id');\n    } else if (inputData && inputEmail && !toggleSubmit) {\n      setItems(items.map(elem => {\n        if (elem.id === isEditItem) {\n          return { ...elem,\n            name: inputData,\n            email: inputEmail\n          };\n        }\n\n        return elem;\n      }));\n      setToggleSubmit(true);\n      setInputData('');\n      setInputEmail('');\n      setIsEditItem(null);\n    } else {\n      const allInputData = {\n        id: new Date().getTime().toString(),\n        name: inputData,\n        email: inputEmail\n      };\n      setItems([...items, allInputData]);\n      setInputData('');\n      setInputEmail('');\n    }\n  }; //delete Items\n\n\n  const deleteItem = index => {\n    const updateItems = items.filter(elem => {\n      return index !== elem.id;\n    });\n    setItems(updateItems);\n  }; // Edit Items\n  // When use click on edit button\n  // 1. Get the id and name of the data which user clicked to edit\n  // 2. Set the toggle mode to change the submit button into edit button\n  // 3. Now update the value of the setInput with the new updated value to edit.\n  // 4. To pass the current element Id to new state variable for reference\n\n\n  const editItem = id => {\n    let newEditItem = items.find(elem => {\n      return elem.id === id;\n    });\n    setToggleSubmit(false);\n    setInputData(newEditItem.name);\n    setInputEmail(newEditItem.email);\n    setIsEditItem(id);\n  }; //Remove All Items\n\n\n  const removeAll = () => {\n    setItems([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Contact, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this)\n  }, void 0, false);\n};\n\n_c = ContactApp;\nexport default ContactApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactApp\");","map":{"version":3,"sources":["R:/react-projects/contact-app/src/ContactApp.jsx"],"names":["React","useState","Contact","ContactApp","addItem","inputData","inputEmail","alert","toggleSubmit","setItems","items","map","elem","id","isEditItem","name","email","setToggleSubmit","setInputData","setInputEmail","setIsEditItem","allInputData","Date","getTime","toString","deleteItem","index","updateItems","filter","editItem","newEditItem","find","removeAll"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAO,aAAP;AACA,OAAO,sDAAP,C,CAA+D;;AAC/D,OAAOC,OAAP,MAAoB,WAApB;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAIrB;AACA,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAG,CAACC,SAAD,IAAc,CAACC,UAAlB,EAA8B;AACzBC,MAAAA,KAAK,CAAC,kCAAD,CAAL;AACC,KAFN,MAGK,IAAGF,SAAS,IAAIC,UAAb,IAA2B,CAACE,YAA/B,EAA6C;AAC9CC,MAAAA,QAAQ,CACJC,KAAK,CAACC,GAAN,CAAWC,IAAD,IAAU;AAChB,YAAGA,IAAI,CAACC,EAAL,KAAYC,UAAf,EAA0B;AACtB,iBAAO,EAAE,GAAGF,IAAL;AAAWG,YAAAA,IAAI,EAACV,SAAhB;AAA2BW,YAAAA,KAAK,EAACV;AAAjC,WAAP;AACH;;AACD,eAAOM,IAAP;AACH,OALD,CADI,CAAR;AAQAK,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAbI,MAcD;AACA,YAAMC,YAAY,GAAG;AAACR,QAAAA,EAAE,EAAE,IAAIS,IAAJ,GAAWC,OAAX,GAAqBC,QAArB,EAAL;AAAsCT,QAAAA,IAAI,EAAEV,SAA5C;AAAuDW,QAAAA,KAAK,EAAEV;AAA9D,OAArB;AACAG,MAAAA,QAAQ,CAAC,CAAC,GAAGC,KAAJ,EAAWW,YAAX,CAAD,CAAR;AACAH,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH;AACJ,GAxBD,CALqB,CA+BrB;;;AACA,QAAMM,UAAU,GAAIC,KAAD,IAAW;AAC1B,UAAMC,WAAW,GAAGjB,KAAK,CAACkB,MAAN,CAAchB,IAAD,IAAU;AACvC,aAAOc,KAAK,KAAKd,IAAI,CAACC,EAAtB;AACH,KAFmB,CAApB;AAGAJ,IAAAA,QAAQ,CAACkB,WAAD,CAAR;AACH,GALD,CAhCqB,CAuCrB;AACA;AAEA;AACA;AACA;AACA;;;AAEA,QAAME,QAAQ,GAAIhB,EAAD,IAAO;AACpB,QAAIiB,WAAW,GAAGpB,KAAK,CAACqB,IAAN,CAAYnB,IAAD,IAAS;AAClC,aAAOA,IAAI,CAACC,EAAL,KAAYA,EAAnB;AACH,KAFiB,CAAlB;AAIAI,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAC,IAAAA,YAAY,CAACY,WAAW,CAACf,IAAb,CAAZ;AACAI,IAAAA,aAAa,CAACW,WAAW,CAACd,KAAb,CAAb;AACAI,IAAAA,aAAa,CAACP,EAAD,CAAb;AACH,GATD,CA/CqB,CA4DrB;;;AACA,QAAMmB,SAAS,GAAG,MAAK;AACnBvB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,2BACG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADH,mBADJ;AAKH,CAtED;;KAAMN,U;AAwEN,eAAeA,UAAf","sourcesContent":["import React,{useState} from 'react';\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"; // bootstrap\r\nimport Contact from './Contact';\r\n\r\nconst ContactApp = () => {\r\n\r\n\r\n\r\n    // Add items\r\n    const addItem = () => {\r\n        if(!inputData && !inputEmail) {\r\n             alert('Please Fill Your Name & Email Id');\r\n             }\r\n        else if(inputData && inputEmail && !toggleSubmit) {\r\n            setItems(\r\n                items.map((elem) => {\r\n                    if(elem.id === isEditItem){\r\n                        return { ...elem, name:inputData, email:inputEmail}\r\n                    }\r\n                    return elem;\r\n                })\r\n            )\r\n            setToggleSubmit(true);\r\n            setInputData('');\r\n            setInputEmail('');\r\n            setIsEditItem(null);\r\n        }\r\n        else{\r\n            const allInputData = {id: new Date().getTime().toString(), name: inputData, email: inputEmail}\r\n            setItems([...items, allInputData]);\r\n            setInputData('');\r\n            setInputEmail('');\r\n        }\r\n    }\r\n\r\n    //delete Items\r\n    const deleteItem = (index) => {\r\n        const updateItems = items.filter((elem) => {\r\n            return index !== elem.id;\r\n        });\r\n        setItems(updateItems);\r\n    }\r\n\r\n    // Edit Items\r\n    // When use click on edit button\r\n\r\n    // 1. Get the id and name of the data which user clicked to edit\r\n    // 2. Set the toggle mode to change the submit button into edit button\r\n    // 3. Now update the value of the setInput with the new updated value to edit.\r\n    // 4. To pass the current element Id to new state variable for reference\r\n\r\n    const editItem = (id) =>{\r\n        let newEditItem = items.find((elem) =>{\r\n            return elem.id === id\r\n        });\r\n\r\n        setToggleSubmit(false);\r\n        setInputData(newEditItem.name);\r\n        setInputEmail(newEditItem.email);\r\n        setIsEditItem(id);\r\n    }\r\n\r\n    \r\n\r\n    //Remove All Items\r\n    const removeAll = () =>{\r\n        setItems([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n           <Contact /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactApp\r\n"]},"metadata":{},"sourceType":"module"}