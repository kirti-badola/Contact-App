{"ast":null,"code":"var _jsxFileName = \"R:\\\\react-projects\\\\todo-app\\\\src\\\\ContactApp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './index.css';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"; // bootstrap\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ContactApp = () => {\n  _s();\n\n  const [inputData, setInputData] = useState(''); // for input name\n\n  const [inputEmail, setInputEmail] = useState(''); // for input email\n\n  const [items, setItems] = useState([]); // for add items\n\n  const [toggleSubmit, setToggleSubmit] = useState(true); // for toggle button means: change add button to edit button\n\n  const [isEditItem, setIsEditItem] = useState(null); // for check edit button id\n  // Add items\n\n  const addItem = () => {\n    if (!inputData && !inputEmail) {\n      alert('Please Fill Your Name & Email Id');\n    } else if (inputData && inputEmail && !toggleSubmit) {\n      setItems(items.map(elem => {\n        if (elem.id === isEditItem) {\n          return { ...elem,\n            name: inputData,\n            email: inputEmail\n          };\n        }\n\n        return elem;\n      }));\n      setToggleSubmit(true);\n      setInputData('');\n      setInputEmail('');\n      setIsEditItem(null);\n    } else {\n      const allInputData = {\n        id: new Date().getTime().toString(),\n        name: inputData,\n        email: inputEmail\n      };\n      setItems([...items, allInputData]);\n      setInputData('');\n      setInputEmail('');\n    }\n  }; //delete Items\n\n\n  const deleteItem = index => {\n    const updateItems = items.filter(elem => {\n      return index !== elem.id;\n    });\n    setItems(updateItems);\n  }; // Edit Items\n  // When use click on edit button\n  // 1. Get the id and name of the data which user clicked to edit\n  // 2. Set the toggle mode to change the submit button into edit button\n  // 3. Now update the value of the setInput with the new updated value to edit.\n  // 4. To pass the current element Id to new state variable for reference\n\n\n  const editItem = id => {\n    let newEditItem = items.find(elem => {\n      return elem.id === id;\n    });\n    setToggleSubmit(false);\n    setInputData(newEditItem.name);\n    setInputEmail(newEditItem.email);\n    setIsEditItem(id);\n  }; //Remove All Items\n\n\n  const removeAll = () => {\n    setItems([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"child_div\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-uppercase heading\",\n          children: \"Add Your contact Details Here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"addItems mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Your Name\",\n            className: \"form-control nameInput\",\n            value: inputData,\n            onChange: e => setInputData(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Enter Your Email\",\n            className: \"form-control EmailInput\",\n            value: inputData,\n            onChange: e => setInputData(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 22\n          }, this), toggleSubmit ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success text-uppercase submit_btn\",\n            onClick: addItem,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success text-uppercase update_btn\",\n            onClick: addItem,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"showItems\",\n          children: items.map(elem => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"eachItems mt-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [elem.name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 51\n                  }, this), \" \", elem.email]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 35\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"todo_btn\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-pencil-square-o edit_btn\",\n                    title: \"Edit Item\",\n                    onClick: () => editItem(elem.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-trash delete_btn\",\n                    title: \"Delete Item\",\n                    onClick: () => deleteItem(elem.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 35\n                }, this)]\n              }, elem.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 33\n              }, this)\n            }, void 0, false);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"showItems\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary remove_btn mt-5 text-uppercase\",\n            onClick: removeAll,\n            children: \"Remove All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ContactApp, \"02L4oG3k7aOSzrZUxAp2RidXPwA=\");\n\n_c = ContactApp;\nexport default ContactApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactApp\");","map":{"version":3,"sources":["R:/react-projects/todo-app/src/ContactApp.jsx"],"names":["React","useState","ContactApp","inputData","setInputData","inputEmail","setInputEmail","items","setItems","toggleSubmit","setToggleSubmit","isEditItem","setIsEditItem","addItem","alert","map","elem","id","name","email","allInputData","Date","getTime","toString","deleteItem","index","updateItems","filter","editItem","newEditItem","find","removeAll","e","target","value"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport './index.css';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"; // bootstrap\r\n\r\nconst ContactApp = () => {\r\n\r\n    const[inputData, setInputData] = useState('');  // for input name\r\n    const[inputEmail, setInputEmail] = useState('');  // for input email\r\n    const[items, setItems] = useState([]);  // for add items\r\n    const[toggleSubmit, setToggleSubmit] = useState(true);   // for toggle button means: change add button to edit button\r\n    const[isEditItem, setIsEditItem] = useState(null);       // for check edit button id\r\n\r\n    // Add items\r\n    const addItem = () => {\r\n        if(!inputData && !inputEmail) {\r\n             alert('Please Fill Your Name & Email Id');\r\n             }\r\n        else if(inputData && inputEmail && !toggleSubmit) {\r\n            setItems(\r\n                items.map((elem) => {\r\n                    if(elem.id === isEditItem){\r\n                        return { ...elem, name:inputData, email:inputEmail}\r\n                    }\r\n                    return elem;\r\n                })\r\n            )\r\n            setToggleSubmit(true);\r\n            setInputData('');\r\n            setInputEmail('');\r\n            setIsEditItem(null);\r\n        }\r\n        else{\r\n            const allInputData = {id: new Date().getTime().toString(), name: inputData, email: inputEmail}\r\n            setItems([...items, allInputData]);\r\n            setInputData('');\r\n            setInputEmail('');\r\n        }\r\n    }\r\n\r\n    //delete Items\r\n    const deleteItem = (index) => {\r\n        const updateItems = items.filter((elem) => {\r\n            return index !== elem.id;\r\n        });\r\n        setItems(updateItems);\r\n    }\r\n\r\n    // Edit Items\r\n    // When use click on edit button\r\n\r\n    // 1. Get the id and name of the data which user clicked to edit\r\n    // 2. Set the toggle mode to change the submit button into edit button\r\n    // 3. Now update the value of the setInput with the new updated value to edit.\r\n    // 4. To pass the current element Id to new state variable for reference\r\n\r\n    const editItem = (id) =>{\r\n        let newEditItem = items.find((elem) =>{\r\n            return elem.id === id\r\n        });\r\n\r\n        setToggleSubmit(false);\r\n        setInputData(newEditItem.name);\r\n        setInputEmail(newEditItem.email);\r\n        setIsEditItem(id);\r\n    }\r\n\r\n    \r\n\r\n    //Remove All Items\r\n    const removeAll = () =>{\r\n        setItems([]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"main_div\">\r\n                <div className=\"child_div\">\r\n                <h1 className=\"text-uppercase heading\">Add Your contact Details Here</h1>\r\n                {/* Add Items */}\r\n                <div className=\"addItems mt-4\"> \r\n                    <input \r\n                    type=\"text\" \r\n                    placeholder=\"Enter Your Name\" \r\n                    className=\"form-control nameInput\"\r\n                    value={inputData}\r\n                    onChange={(e) => setInputData(e.target.value)}\r\n                     />\r\n\r\n                     <input \r\n                    type=\"email\" \r\n                    placeholder=\"Enter Your Email\" \r\n                    className=\"form-control EmailInput\"\r\n                    value={inputData}\r\n                    onChange={(e) => setInputData(e.target.value)}\r\n                     />\r\n                     {\r\n                         toggleSubmit ? <button className=\"btn btn-success text-uppercase submit_btn\" onClick={addItem}>Submit</button>:\r\n                         <button className=\"btn btn-success text-uppercase update_btn\" onClick={addItem}>Update</button>\r\n                     }\r\n                     \r\n                </div>\r\n\r\n                {/* Show Items */}\r\n                <div className=\"showItems\">\r\n\r\n                {\r\n                    items.map((elem) => {\r\n                        return(\r\n                            <>\r\n                                <div className=\"eachItems mt-4\" key={elem.id}>\r\n                                  <h3>{elem.name} <br /> { elem.email}</h3>\r\n                                 \r\n                                  <div className=\"todo_btn\">\r\n                                    <i className=\"fa fa-pencil-square-o edit_btn\" title=\"Edit Item\" onClick={()=>editItem(elem.id)}></i>\r\n                                    <i className=\"fa fa-trash delete_btn\" title=\"Delete Item\" onClick={()=>deleteItem(elem.id)}></i>\r\n                                  </div>\r\n\r\n                                  </div>\r\n                                  \r\n                              \r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                </div>\r\n\r\n                {/* Clear All List */}\r\n                <div className=\"showItems\">\r\n                    <button \r\n                    className=\"btn btn-primary remove_btn mt-5 text-uppercase\"\r\n                    onClick={removeAll}\r\n                    >Remove All</button>\r\n                </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactApp\r\n"]},"metadata":{},"sourceType":"module"}